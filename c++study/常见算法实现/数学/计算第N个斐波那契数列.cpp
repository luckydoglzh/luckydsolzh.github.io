/**
 * @file
 * @brief 计算给定输入的第N个斐波那契数。
 * 使用自定义构建的任意精度整数库来执行加法和其他运算。
 *
 * 用时 0.608246 秒计算 50,000^th 斐波那契数，该数包含10450位数字！
 *
 * \author [Krishna Vedala](https://github.com/kvedala)
 * @see fibonacci.cpp, fibonacci_fast.cpp, string_fibonacci.cpp
 */

#include <cinttypes>
#include <ctime>
#include <iostream>

#include "./large_number.h"  // 引入自定义大数库

/** 
 * 计算斐波那契数列，使用递推关系
 * \f[f(n) = f(n-1) + f(n-2)\f]
 * 并返回一个 large_number 类型的结果。
 */
large_number fib(uint64_t n) {
    large_number f0(1);  // 初始化 f0 为 1
    large_number f1(1);  // 初始化 f1 为 1

    do {
        large_number f2 = f1;  // 保存当前的 f1
        f1 += f0;  // f1 变成 f1 + f0，即当前斐波那契数
        f0 = f2;  // f0 变成之前的 f1，即上一个斐波那契数
        n--;  // 递减 n
    } while (n > 2);  // 当 n > 2 时继续循环计算

    return f1;  // 返回计算得到的第 n 个斐波那契数
}

/** 主函数 */
int main(int argc, char *argv[]) {
    uint64_t N;
    if (argc == 2) {
        N = strtoull(argv[1], NULL, 10);  // 从命令行参数获取 N 的值
    } else {
        std::cout << "请输入 N: ";
        std::cin >> N;  // 如果没有命令行参数，提示用户输入 N
    }

    clock_t start_time = std::clock();  // 记录开始时间
    large_number result = fib(N);  // 调用 fib 函数计算第 N 个斐波那契数
    clock_t end_time = std::clock();  // 记录结束时间
    double time_taken = static_cast<double>(end_time - start_time) / 
                        static_cast<double>(CLOCKS_PER_SEC);  // 计算执行时间

    std::cout << std::endl
              << N << "^th 斐波那契数: " << result << std::endl  // 输出结果
              << "数字的位数: " << result.num_digits() << std::endl  // 输出数字的位数
              << "计算时间: " << std::scientific << time_taken << " s"  // 输出计算时间
              << std::endl;

    // 进行一次测试，验证结果是否正确
    N = 5000;
    if (fib(N) ==
        large_number(
            "387896845438832563370191630832590531208212771464624510616059721489"
            "555013904403709701082291646221066947929345285888297381348310200895"
            "498294036143015691147893836421656394410691021450563413370655865623"
            "825465670071252592990385493381392883637834751890876297071203333705"
            "292310769300851809384980180384781399674888176555465378829164426891"
            "298038461377896902150229308247566634622492307188332480328037503913"
            "035290330450584270114763524227021093463769910400671417488329842289"
            "149127310405432875329804427367682297724498774987455569190770388063"
            "704683279481135897373999311010621930814901857081539785437919530561"
            "751076105307568878376603366735544525884488624161921055345749367589"
            "784902798823435102359984466393485325641195222185956306047536464547"
            "076033090242080638258492915645287629157575914234380914230291749108"
            "898415520985443248659407979357131684169286803954530954538869811466"
            "508206686289742063932343848846524098874239587380197699382031717420"
            "893226546887936400263079778005875912967138963421425257911687275560"
            "0360311370547754724604639987588046985178408674382863125"))
        std::cout << "第 " << N << "^th 斐波那契数测试通过！" << std::endl;  // 如果测试通过，输出成功信息
    else
        std::cerr << "第 " << N << "^th 斐波那契数测试失败！" << std::endl;  // 如果测试失败，输出失败信息

    return 0;
}
